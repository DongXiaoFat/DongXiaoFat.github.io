[ { "title": "深入理解SystemServer启动", "url": "/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SystemServer%E5%90%AF%E5%8A%A8/", "categories": "Android, Framework", "tags": "Framework", "date": "2021-02-26 13:45:00 +0800", "snippet": "深入理解SystemServer启动 SystemServer 进程是我们Android系统中重中之重的一个进程服务，Android中重要的Service几乎都是有它管理运行，从《深入理解Zygote启动》一文中，我们知道了，SystemServer是由Zygote进程进行fork出来，其Binder线程是由 ZygoteInit 进行创建，第一个函数入口是SystemServer.java 里的main 函数。1. SystemServer 入口——main1.1 SystemServer 对象构造 首先通过查询SYSPROP_START_COUNT当前启动的次数+1. ..." }, { "title": "SurfaceFlinger 之 HWComposer", "url": "/posts/SurfaceFlinger-HWComposer/", "categories": "Android, Framework", "tags": "Framework", "date": "2021-02-26 12:45:00 +0800", "snippet": "SurfaceFlinger 之 HWComposer HWC（hwcomposer）是Android中进行窗口（Layer）合成和显示的HAL层模块，其实现是特定于设备的，而且通常由显示设备制造商 (OEM)完成，为SurfaceFlinger服务提供硬件支持。 SurfaceFlinger可以使用OpenGL ES合成Layer，这需要占用并消耗GPU资源。大多数GPU都没有针对图层合成进行优化，当SurfaceFlinger通过GPU合成图层时，应用程序无法使用GPU进行自己的渲染。而HWC通过硬件设备进行图层合成，可以减轻GPU的合成压力。HWComposer 与 Surfa..." }, { "title": "Android OOM Low Memory Killer 机制", "url": "/posts/Android-oom-adj/", "categories": "Android, Framework", "tags": "Framework", "date": "2021-02-26 08:45:00 +0800", "snippet": "Android OOM Low Memory Killer 机制本文主要介绍Android的low memory killer的 oom_adj的相关概念，以及根据一些案例来阐述了解oom_adj对于做Android应用开发的重要意义。1. Low Memory Killer中进程的分类以及各类进程的adj值 在Android的low memroy killer机制中，会对于所有进程进行分类，对于每一类进程会有其oom_adj值的取值范围，oom_adj值越高则代表进程越不重要，在系统执行低杀操作时，会从oom_adj值越高的开始杀。系统low memeory killer机制下对于进..." }, { "title": "深入理解 AndroidFramework 之 Zygote 启动", "url": "/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Zygote-%E5%90%AF%E5%8A%A8/", "categories": "Android, Framework", "tags": "Framework", "date": "2021-02-25 20:45:00 +0800", "snippet": "深入理解 AndroidFramework 之 Zygote 启动 Zygote 作为Android 第一个出道的进程被广大网友所熟知，那么该进程是如何被加载，如何运行的呢？在这里我们就尝试将她神秘的面纱一层层揭开。1. Init 进程 Linux中PID为0的进程是所有其他进程的祖先, 也称作idle进程或swapper进程，在系统初始化时由kernel自身从无到有创建。进程0的数据成员大部分是静态定义的。 在Android系统中 0号进程会孵化出2个核心进程，一个进程号为2的名为kthreadd的进程，另一个则是进程号为1名为init的进程。kthreadd进程由idle通过k..." }, { "title": "深入理解Android Font 机制", "url": "/posts/AndroidFont/", "categories": "Android, Framework", "tags": "Framework", "date": "2021-02-16 16:30:00 +0800", "snippet": "深入理解Android Font 机制 Android 字体是由配置好的ttf字体文件来描述的，然而在字体加载的过程中首先就是根据字符去匹配相应的ttf文件，然后在该ttf文件中依照Unicode编码查找字符形状进行描绘。Unicode编码Unicode 规范规定，使用U+前缀加上一个十六进制的整数表示一个字符，比如U+0041表示大写拉丁字母A。而整个Unicode的字符集，需要U+000000到U+10FFFF的存储空间，一共使用了21bit共有17*2^16个位置。从U+000000到U+10FFFF,unicod的编码空间可以被划分为17个平面（plane），每个平面包含2^1..." }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "snippet": "In Chirpy, the image files of Favicons are placed in assets/img/favicons/. You may need to replace them with your own. So let’s see how to customize these Favicons.With a square image (PNG, JPG or GIF) in hand, open the site Favicon &amp;amp; App Icon Generator and upload your original image.Clic..." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at o..." } ]
